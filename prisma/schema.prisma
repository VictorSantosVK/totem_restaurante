// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id              String         @id @default(uuid())
  name            String
  slug            String
  description     String
  avatorImageUrl  String
  coverImageIrl   String
  menuCategoriess MenuCategory[]
  products        Product[]
  orders          Order[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  products     Product[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Product {
  id             String          @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String
  orderProducts  OrderProducts[]
  restaurants    Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  menuCategory   MenuCategory    @relation(fields: [menuCategoryId], references: [id])
  menuCategoryId String
  createdId      DateTime        @default(now())
  updatedId      DateTime        @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod consumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id])
  restaurantId      String
  orderProducts     OrderProducts[]
  createdId         DateTime          @default(now())
  updatedId         DateTime          @updatedAt
}

model OrderProducts {
  is        String   @id @default(uuid())
  product   Product  @relation(fields: [productID], references: [id])
  productID String
  orderID   Int
  order     Order    @relation(fields: [orderID], references: [id])
  quantity  Int
  price     Float
  createdId DateTime @default(now())
  updatedId DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum consumptionMethod {
  TAKEAWAY
  DINE_IN
}